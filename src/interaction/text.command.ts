import { Markup, Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import { Actions } from '../constants/constants.js';
import { BotContext } from '../models/config.model.js';
import { Guard } from '../services/guard.js';
import { Command } from './general.command.js';

export class –°orrespondence extends Command {
  constructor(public bot: Telegraf<BotContext>, private guard: Guard) {
    super(bot);
  }
  public handle(): void {
    this.bot.on(message('text'), async (ctx) => {
      const { first_name = 'Stranger', id: userID = 0 } = await ctx.from!;
      if (this.guard.isUserSuspected(userID) && !this.guard.isAuthorized(userID)) {
        await ctx.replyWithHTML(
          `<b>–¢–æ —â–æ, ${first_name}, –∞–≤—Ç–æ—Ä–∏–∑—É—î–º–æ—Å—å? ü§û</b>`,
          Markup.inlineKeyboard([[Markup.button.callback('–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å', Actions.INCOMING_PASSWORD_GENERAL)]])
        );
      } else if (!this.guard.isUserSuspected(userID) && !this.guard.isAuthorized(userID)) {
        await ctx.reply(
          `–ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–æ–±–æ—Ç–∏ —á–∞—Ç—É –≤–≤–µ–¥—ñ—Ç—å "/start" –ø—Ä–æ–π–¥—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —ñ –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –≥–æ–ª–æ—Å–æ–≤–∏–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º. –î–ª—è –≤–∏–≤–æ–¥—É —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥—ñ—Ç—å "/help".`
        );
      } else if (this.guard.isAuthorized(userID)) {
        ctx.reply('GPT ready ))');
      }
    });
  }
}
