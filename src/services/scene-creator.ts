import { Markup, Scenes } from 'telegraf';
import { Actions, ScenesID } from '../constants/constants.js';
import { BotContext } from '../models/config.model.js';
import { Guard } from './guard.js';

export class SceneCreator {
  constructor(private readonly guard: Guard) {}

  public getPasswordScene(): Scenes.BaseScene<BotContext> {
    const passwordScene: Scenes.BaseScene<BotContext> = new Scenes.BaseScene<BotContext>(ScenesID.PASSWORD);
    passwordScene.enter(async (ctx) => {
      const { first_name = 'Stranger', id: userID = 0 } = await ctx.from!;
      if (this.guard.isBlocked(userID)) ctx.scene.leave();
      await ctx.replyWithHTML(
        `<b>–ü—Ä–∏–≤—ñ—Ç ${first_name}, –Ω–∞–∂–∞–ª—å –¥–æ—Å–ø—É–ø –æ–±–º–µ–∂–µ–Ω–æ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó ü§®</b>`,
        Markup.inlineKeyboard([[Markup.button.callback('–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å', Actions.INCOMING_PASSWORD)]])
      );
    });

    passwordScene.leave(async (ctx) => {
      const authorizationStatus = this.guard.isAuthorized(ctx.from!.id)
        ? 'Authorization compleated.'
        : '–í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ –¥—ñ–∞–ª–æ–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—óü§´';
      ctx.reply(authorizationStatus);
    });

    passwordScene.action(Actions.INCOMING_PASSWORD, async (ctx) => {
      console.log('Password scene generator action hendler: INCOMING_PASSWORD');
      if (this.guard.isBlocked(ctx.from!.id)) ctx.scene.leave();
      await ctx.reply('–ë—É–¥—å–ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π —Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –±—É–¥–∏–Ω–∫—É 86 –ì–≤. –î–∏–≤—ñ–∑—ñ—ó ‚Ññ1');
    });

    passwordScene.action(Actions.REJECT_PASSWORD_INPUT, async (ctx) => {
      if (this.guard.isBlocked(ctx.from!.id)) ctx.scene.leave();
      await ctx.reply('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—é –æ–±–º–µ–∂–µ–Ω–∞ —Ç—Ä—å–æ–º–∞, –≤–∞—Å –≤–Ω–µ—Å–µ–Ω–æ –≤ –ø–µ—Ä–µ–ª—ñ–∫ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ üòÑ!');
      this.guard.addSuspects(ctx.from!.id)
        ? await ctx.scene.leave()
        : (await ctx.reply('–í–∞—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ üòè!'), await ctx.scene.leave());
    });

    passwordScene.action(Actions.BAN, async (ctx) => {
      await ctx.reply('–í–∞—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ üò∂‚Äçüå´Ô∏è!');
      this.guard.banUser(ctx.from!.id);
    });

    passwordScene.on('text', (ctx) => {
      const userID = ctx.from!.id;
      if (this.guard.isBlocked(userID)) ctx.scene.leave();
      const password = Number(ctx.message.text);
      if (!isNaN(password)) {
        this.guard.checkPassword(ctx.message.text, userID) ? ctx.scene.leave() : this.handleIncorrectPass(ctx, '–Ω–µ–≤—ñ—Ä–Ω–µ');
      } else {
        this.handleIncorrectPass(ctx, '–Ω–µ —á–∏—Å–ª–æ–≤–µ');
      }
    });

    passwordScene.command('cancel', async (ctx) => {
      ctx.scene.leave();
      await ctx.reply('–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
    });

    passwordScene.on('message', async (ctx) => {
      if (this.guard.isBlocked(ctx.from!.id)) ctx.scene.leave();
      await ctx.reply('–î—ñ–∞–ª–æ–≥ —Å–ø—Ä–∏–π–º–∞—î –ª–∏—à–µ —Ç–µ–∫—Å—Ç');
    });

    return passwordScene;
  }

  private handleIncorrectPass(ctx: BotContext, reason: string): void {
    const { first_name = 'Stranger', id: userID = 0 } = ctx.from!;
    if (this.guard.isUserSuspected(userID)) {
      this.handleSuspectBehaviour(ctx);
    }

    ctx.replyWithHTML(
      `<b>${first_name}, –±—É–ª–æ –≤–≤–µ–¥–µ–Ω–æ ${reason} –∑–Ω–∞—á–µ–Ω–Ω—è.</b>`,
      Markup.inlineKeyboard([
        [
          Markup.button.callback('–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ', Actions.INCOMING_PASSWORD),
          Markup.button.callback('–í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—å', Actions.REJECT_PASSWORD_INPUT),
        ],
      ])
    );
  }

  private handleSuspectBehaviour(ctx: BotContext): void {
    const { first_name = 'Stranger', id: userID = 0 } = ctx.from!;
    const attemptCount = this.guard.getSuspectAttempt(userID);
    ctx.replyWithHTML(
      `<b>${first_name}, —á–∏ –≥–æ—Ç–æ–≤—ñ –≤–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–∞—Ä–æ–ª—å? –ó–∞–ª–∏—à–∏–ª–æ—Å—å ${attemptCount} —Å–ø—Ä–æ–±! </b>`,
      Markup.inlineKeyboard([
        [Markup.button.callback('–¢–∞–∫', Actions.INCOMING_PASSWORD), Markup.button.callback('–ù—ñ', Actions.BAN)],
      ])
    );
  }
}
